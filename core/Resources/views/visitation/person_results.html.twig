{% extends '@KontrolgruppenCore/main/index.html.twig' %}

{% block content %}
    <div class="row">
        <div class="col-md-10 left-tables">
            <h1 class="headerVisitation">{{ 'navigation.main.visitation'|trans }}</h1>

            <!-- Other tables aligned left -->
                {# Individual tables go here #}

                {# Adresse historik Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/adresse_historik.html.twig' with {'data': data} %}

                {# Bopælssamling Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/bopaelssamling.html.twig' %}

                {# Bolig Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/bolig.html.twig' %}

                {# Børn Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/boern.html.twig' %}

                {# Civilstatus Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/civil_status.html.twig' %}

                {# CPR historik Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/cpr_historik.html.twig' %}

                {# Navnehistorik Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/navnehistorik.html.twig' %}

                {# Statsborgerskab Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/statsborgerskab.html.twig' %}

                {# Virksomhed Table #}
                {% include '@KontrolgruppenCore/visitation/person_tables/virksomhed.html.twig' %}
                <div class="d-flex justify-content-between">
                <div></div>
                <div class="new-process">
                    <form method="POST" action="{{ path('process_new', {clientType: client_type}) }}">
                        <input type="hidden" name="identifier" value="{{ data.stamdata.cpr[:6] ~ '-' ~ data.stamdata.cpr[6:] }}">
                        <input type="hidden" name="case_worker" value="{{ user }}">
                        <button type="submit" class="btn btn-md btn-primary mb-3" class="btn btn-primary">
                            {{ 'visitation.new.title'|trans }}
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Stamdata Table aligned right -->
        <div class="col-md-2">
            <div class="fixed-table">
                <div class="card-header text-black stam-data">
                    <h6 class="mb-0" id="stam-data">
                        {{ 'visitation.basic_info'|trans }}
                    </h6>
                </div>
                <table class="table table-bordered">
                    <tbody class="stam-data-body">
                        <tr>
                            <td><b>{{ 'visitation.name'|trans }}</b></td>
                            <td>{{ data.stamdata.navn }}</td>
                        <tr>
                            <td><b>{{ 'visitation.cpr'|trans }}</b></td>
                            <td class="cprField">{{ data.stamdata.cpr }}</td>
                        </tr>
                        <tr>
                            <td><b>{{ 'visitation.address'|trans }}</b></td>
                            <td>
                                {{ data.stamdata.adresse }}
                                <br/>
                                {{ data.stamdata.by }}
                            </td>
                        </tr>
                        <tr>
                            <td><b>{{ 'visitation.gender'|trans }}</b></td>
                            <td>{{ data.stamdata.koen|capitalize }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .new-process {
            margin-top: 20px;
            margin-bottom: 50px;
        }
        @media (max-width: 1428px) {
            .fixed-table {
                position: static;
                width: 100%;
            }
        }
        @media (min-width: 1429px) {
            .fixed-table {
                position: fixed;
                top: 180px;
                right: 30px;
                width: 25%;
                z-index: 999;
            }
        }
        .left-tables {
            max-width: 1000px;
        }
        .card-header {
            background-color:#c8defc;
        }
        .card-header.active {
            background-color: #81b4fe;
        }
        .btn-header{
            color: black;
            font-weight: bold;
        }
        .btn-header:hover{
            font-weight: bold;
        }
        .btn-header:focus{
            text-decoration: none;
            box-shadow: none;
        }
        #stam-data{
            font-weight: bold;
        }
        .stam-data{
            background-color: #81b4fe;
        }
        thead.data-header{
            background-color: #C9DDFB !important;
        }
        tbody .bg-light{
            background-color: #E2EEFF!important;
        }
        .stam-data-body{
            background-color: #e8ecfc;
        }
        .card-header.collapsed .fa-chevron-down {
            transform: rotate(90deg);
        }

        .card-header.active .fa-chevron-up {
            transform: rotate(-90deg);
        }
        .empty-column {
            color: red;
        }
        .person-cpr {
            color: black;
            text-decoration: underline;
        }
        .iconClass{
            margin-left: 10px
        }
        .headerVisitation{
            font-size: 25px !important;
            margin-top: 79px;
        }
        .table-bordered td, .table-bordered th {
            border: 1px solid #ffffff !important;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        function debounce(func, wait) {
            var timeout;
            return function() {
                var context = this, args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    func.apply(context, args);
                }, wait);
            };
        }
        $('.person-cpr').on('click', function(event) {
            event.preventDefault(); // Prevent the default anchor click behavior

            var cprNumber = $(this).data('cpr'); // Retrieve the CPR number from the data attribute

            // Create a form element
            var form = $('<form>', {
                'method': 'post',
                'action': '/visitation/result',
                'target': '_blank' // This will open the form submission in a new tab
            }).append($('<input>', {
                'type': 'hidden',
                'name': 'cpr',
                'value': cprNumber
            }));

            // Append the form to the body and submit it
            form.appendTo('body').submit().remove();
        });
        function formatCprAndCalculateAge(cpr) {
            // Extract day, month, year, and 7th digit from the CPR number
            const day = cpr.substring(0, 2);
            const month = cpr.substring(2, 4);
            const year = cpr.substring(4, 6);
            const seventhDigit = parseInt(cpr.substring(6, 7), 10);
            const lastFour = cpr.substring(6, 10);
            const cprAgeTranslation = "{{ 'visitation.form.cpr_age'|trans }}";
            // Determine the correct century
            let fullYear;
            if (seventhDigit >= 0 && seventhDigit <= 3) {
                fullYear = `19${year}`;
            } else if (seventhDigit === 4) {
                fullYear = (parseInt(year, 10) >= 37) ? `19${year}` : `20${year}`;
            } else if (seventhDigit >= 5 && seventhDigit <= 8) {
                fullYear = (parseInt(year, 10) >= 58) ? `18${year}` : `20${year}`;
            } else if (seventhDigit === 9) {
                fullYear = (parseInt(year, 10) >= 37) ? `19${year}` : `20${year}`;
            }

            // Calculate the current age
            const today = new Date();
            const birthDate = new Date(`${fullYear}-${month}-${day}`);
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDifference = today.getMonth() - birthDate.getMonth();

            if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }

            // Format the CPR number
            const formattedCpr = `${day}${month}${year}-${lastFour} (${age} ${cprAgeTranslation})`;

            return formattedCpr;
        }
        function formatCprDash(cpr){
            const formattedCpr = `${cpr.substring(0, 6)}-${cpr.substring(6)}`;
            return formattedCpr;
        }
        $(document).ready(function() {

            $('.older-than-5').hide();

            // Format the CPR number and calculate the age for each cprField class
            const cprFields = document.getElementsByClassName("cprField");
            for (let i = 0; i < cprFields.length; i++) {
                const originalCpr = cprFields[i].textContent;
                const formattedCprAndAge = formatCprAndCalculateAge(originalCpr);
                cprFields[i].textContent = formattedCprAndAge;
            }
            const cprDashes = document.getElementsByClassName("cpr-dash");
            for (let i = 0; i < cprDashes.length; i++) {
                const originalCpr = cprDashes[i].textContent;
                const formattedCpr = formatCprDash(originalCpr);
                cprDashes[i].textContent = formattedCpr;
            }

            var handleToggle = debounce(function() {
                var btn = $(this);
                var cardHeader = btn.closest(".card-header");
                var icon = cardHeader.find('.iconClass');

                cardHeader.toggleClass("collapsed active");

                if (cardHeader.hasClass('collapsed')) {
                    icon.removeClass('fa-sort-down').addClass('fa-sort-up');
                } else {
                    icon.removeClass('fa-sort-up').addClass('fa-sort-down');
                }

                if (cardHeader.hasClass("collapsed")) {
                    // Ajax post request
                    $.ajax({
                        url: "{{ path('log_visitation') }}",
                        type: "POST",
                        data: {
                            table_name: cardHeader.attr("id"),
                            cvr: cvrElement.innerHTML,
                            visitation: "{{ visitation }}",
                        },
                        success: function(data) {
                            console.log(data);
                        }
                    });
                }
            }, 300); // 300 milliseconds debounce time

            $(".btn-header").click(handleToggle);
            $('.show-history').on('click', function() {
                // Toggle the visibility of rows marked as older than 5 years
                $(this).closest('div').find('.older-than-5').toggle();
                $.ajax({
                    url: "{{ path('log_visitation') }}",
                    type: "POST",
                    data: {
                        table_name: $(this).closest('.card').find('.card-header').attr("id") + "History",
                        cpr: "{{ data.stamdata.cpr }}",
                        visitation: "{{ visitation }}",
                    },
                    success: function(data) {
                        console.log(data);
                    }
                });
                // Optionally, change the button text based on current state
                $(this).closest('tr').hide();
            });
        });
    </script>
{% endblock %}
